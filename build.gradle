plugins {
    id("java")
    id("com.gradleup.shadow") version "9.1.0"
}

allprojects {
    group = 'ru.matveylegenda'
    version = '1.3.0'

    repositories {
        mavenCentral()
        maven { url "https://libraries.minecraft.net" }
        maven { url 'https://jitpack.io' }
        maven { url 'https://repo.alessiodp.com/releases/' }
        maven { url 'https://repo.papermc.io/repository/maven-public/' }
    }
}

subprojects {
    apply plugin: "java"

    dependencies {
        implementation("com.github.1050TIt0p:NanoLimbo:1.9.10")
        implementation("com.j256.ormlite:ormlite-jdbc:6.1")
        implementation("com.zaxxer:HikariCP:7.0.1")
        implementation("at.favre.lib:bcrypt:0.10.2")
        implementation("com.github.ben-manes.caffeine:caffeine:3.2.2")
        implementation("net.elytrium:serializer:1.1.1")

        compileOnly("net.kyori:adventure-api:4.24.0")
        compileOnly("net.kyori:adventure-text-minimessage:4.24.0")
        compileOnly("net.kyori:adventure-text-serializer-legacy:4.24.0")
        compileOnly("org.xerial:sqlite-jdbc:3.50.3.0")
        compileOnly("com.h2database:h2:2.3.232")
        compileOnly("com.mysql:mysql-connector-j:9.4.0")
        compileOnly("org.postgresql:postgresql:42.7.7")
        compileOnly("org.projectlombok:lombok:1.18.42")
        annotationProcessor("org.projectlombok:lombok:1.18.42")
    }

    def targetJavaVersion = 17
    java {
        def javaVersion = JavaVersion.toVersion(targetJavaVersion)
        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion
        if (JavaVersion.current() < javaVersion) {
            toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
            options.release.set(targetJavaVersion)
        }
    }
}

dependencies {
    implementation(project(":common"))
    implementation(project(":bungee"))
    implementation(project(":velocity"))
}

tasks.shadowJar {
    archiveClassifier.set("")

    relocate("org.bstats", "ru.matveylegenda.tiauth.thirdparty.org.bstats")
    relocate("com.j256.ormlite", "ru.matveylegenda.tiauth.thirdparty.com.j256.ormlite")
    relocate("com.zaxxer.hikari", "ru.matveylegenda.tiauth.thirdparty.com.zaxxer.hikari")
    relocate("at.favre.lib", "ru.matveylegenda.tiauth.thirdparty.at.favre.lib")
    relocate("com.github.benmanes.caffeine", "ru.matveylegenda.tiauth.thirdparty.com.github.benmanes.caffeine")
    relocate("com.google.errorprone", "ru.matveylegenda.tiauth.thirdparty.com.google.errorprone")
    relocate("org.jspecify", "ru.matveylegenda.tiauth.thirdparty.org.jspecify")
    relocate("net.elytrium.serializer", "ru.matveylegenda.tiauth.thirdparty.net.elytrium.serializer")
    relocate("ua.nanit.limbo", "ru.matveylegenda.tiauth.thirdparty.ua.nanit.limbo")
    relocate("org.spongepowered.configurate", "ru.matveylegenda.tiauth.thirdparty.org.spongepowered.configurate")
    relocate("io.leangen.geantyref", "ru.matveylegenda.tiauth.thirdparty.io.leangen.geantyref")
    relocate("com.grack.nanojson", "ru.matveylegenda.tiauth.thirdparty.com.grack.nanojson")
    relocate("net.byteflux", "ru.matveylegenda.tiauth.thirdparty.net.byteflux")

    exclude("net/kyori/**")
    exclude("org/slf4j/**")
    exclude("META-INF/maven/**")

    mergeServiceFiles()

    minimize {
        exclude(project(":common"))
        exclude(project(":bungee"))
        exclude(project(":velocity"))

        exclude("ru/matveylegenda/.*")
    }
}

tasks.jar.enabled = false
tasks.build.dependsOn tasks.shadowJar